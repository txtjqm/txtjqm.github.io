{"version":3,"sources":["ReactKnobFn.js","index.js"],"names":["QRCode","require","ReactKnob","props","geomAngle","useRef","knobAngle","useState","mouseX_st","setmouseX_st","mouseY_st","setMouseY_st","lastX","lastY","thisReactNode","canvasA","canvasWidthHeight","renderCt","reRenderStateTrigger","setReRenderStateTrigger","doTouchMove","touchEvt","preventDefault","mouseX","touches","clientX","this","offsetLeft","mouseY","current","clientY","offsetTop","window","scrollY","toFixed","Math","abs","except","console","log","useEffect","nodeA","borderWidth","parseFloat","parentNode","style","clientWidth","calcWidthHeight","thisNode","mouseDown","evt","document","addEventListener","doMoveMouse","id","location","reload","event","mouseEvt","removeEventListener","knobID","componentDidMountX","width","height","drawContextA","getContext","clearRect","center","lineWidth","lineWidthPct","radius","dx","dy","atan","PI","knobCallback","strokeStyle","beginPath","moveTo","ratio","pow","lineTo","stroke","topDeadCenter","arc","drawCanvas","delta","RenderStatusBox","topOffst","widthHeight","calcFontSize","widthFontWidthFactor","ref","displayA","className","classNamePropA","stylePropA","pointerEvents","userSelect","gridRow","gridColumn","marginTop","display","overflow","fontSize","gridTemplateColumns","msg","border","knobCallbackA","newVal","TestReactKnobInGrid","qrcanvas","myURL","href","toCanvas","error","doQRcode","textAlign","paddingRight","onClick","background","currentTarget","textContent","navigator","clipboard","writeText","execCommand","getSelection","removeAllRanges","innerWidth","fontFamily","fontWeight","RouterForMultiPages","path","to","React","Component","ShowLoc","ReactDOM","getElementById"],"mappings":"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","file":"static/js/main.a1c3fb58.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef, useLayoutEffect, useCallback } from 'react';\r\nimport './ComponentDev.css'; // this pulls css into the render() stuff. Dont need <style> tag!\r\nvar QRCode = require('qrcode')\r\n\r\n// this is only for class components....   import * as ReactDOM from 'react-dom'; \r\n\r\n// ---------- START snip to copy into react code -----------------------\r\n// for react project using package.json .....    import React from 'react';\r\n// for react project using package.json .....    import * as ReactDOM from 'react-dom'; \r\n// for codepen.io project .... import * as React from \"https://cdn.skypack.dev/react@17.0.1\";\r\n// for codepen.io project .... import * as ReactDOM from \"https://cdn.skypack.dev/react-dom@17.0.1\";\r\n////////////////////////////////////////////////////////////////////\r\nconst LABEL = \"mon 9\"\r\nconst MOUSEMOVETHRESHOLD = 22; \r\n// const styles = { blueStyle: { color: '#0000FF', fontWeight: '100' }, greenStyle: { color: '#00FF00 '}};\r\n// SEE EXPLANATION AT END HOW  CODEPEN IMPORTS NPM PACKAGES. PACKAGE.JSON IS NOT USED.\r\nfunction ReactKnob( props ) {\r\n  \r\n  const UNINIT_A = -12;\r\n  var geomAngle = useRef(-1); var knobAngle = useRef(-1);\r\n  var [mouseX_st, setmouseX_st] = useState(-1000); // useState causes re-render of component\r\n  var [mouseY_st, setMouseY_st] = useState(-1000);\r\n  var lastX=UNINIT_A; var lastY=0; \r\n  const thisReactNode = useRef();\r\n  var canvasA = useRef(); // useRef let it keep value between renders. Dont forget to use \"current\"\r\n  var canvasWidthHeight = useRef(UNINIT_A);\r\n  var displayA;\r\n  var renderCt = useRef(0)\r\n  var [reRenderStateTrigger, setReRenderStateTrigger] = useState(false);\r\n  // const [state, dispatch] = useReducer(reducer, initialArg, init); todo: learn about useReducer\r\n\r\n  /* React function component has advantage over class component because it lets you access dom \r\n   * components easily [search for \"thisReactNode\" to see how it works]\r\n   * There are 3 'hook functions' used here for react function components:\r\n   *    useState(), useRef() and useEffect. I'm sure these names mean lots to the designers but they dont say much to me.\r\n   * Below is how they are used in this project, but are not complete descriptions:\r\n   * 1. \"useEffect\" is the main lifecycle method of function components. \r\n   *   It invokes custom code when component renders, conditionally according to second array arg:\r\n   *   + missing: run every time. Good for getting dimensions of window etc\r\n   *   + [] empty: run only once when component mounts like componentDidMount\r\n   *   + [aa, bb]: do only when aa or bb changes\r\n   *   + [] empty and returns function: runs when component unmounts\r\n   * 2. \"useState\" sets up a variable which perists between renders and queues a render when its value is changed.\r\n   * 3. \"useRef\" lets you name a dom element and reference it in the code.\r\n   */\r\n\r\n  // [] empty: run only once when component mounts like componentDidMount\r\n  useEffect(() => { \r\n      console.log('useEffect run once')\r\n      calcWidthHeight(thisReactNode.current)\r\n      componentDidMountX(thisReactNode.current); \r\n      setReRenderStateTrigger(true); // now that dimensions are known, force a re-render so thing laid out properly\r\n      // NEXT LINE IS AN ESLINT SETTING AND NOT A COMMENT. IT STOPS AN ESLINT WARNING MSG !!!!\r\n      // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, []); \r\n\r\n  // useEffect(() => {  // gets called when redrawing if mouseX_st or mouseY_st changes\r\n  //   // console.log('yyyy ' + mouseX_st)\r\n  // }, [mouseX_st, mouseY_st]);\r\n\r\n  useEffect(() => {  // runs every time. Draws the stuff in canvas according to x,y mouse pos.\r\n    // the component has been drawn but the canvas has not yet been drawn, so draw it.\r\n    console.log('useEffect run every time')\r\n    // calcWidthHeight(thisReactNode.current)\r\n    drawCanvas();\r\n    //displayA.current.style.display = 'grid';\r\n    //displayA.current.style.top = (canvasWidthHeight.current * 0.5) + \"px\";\r\n  });\r\n\r\n  useEffect(() => { // [] empty and returns function: component unmounted\r\n    return (() => { console.log('component unmounted') })\r\n  }, []);\r\n\r\n  function calcWidthHeight(nodeA) {\r\n    var borderWidth = parseFloat(nodeA.parentNode.style.borderWidth); // \"4px -> 4\"\r\n    canvasWidthHeight.current = nodeA.parentNode.clientWidth - borderWidth * 2; // offsetWidth  .clientWidth; \r\n  }\r\n \r\n  // const componentDidMountX = useCallback(() => {  // to avoid error when calling from useEffect()\r\n  function componentDidMountX(thisNode) {  // one-time setup of event listeners\r\n    console.log('componentDidMountX ' + thisNode.id)\r\n    document.addEventListener('resize', () =>  { \r\n      document.location.reload(); \r\n    });\r\n    // NEXT LINE IS AN ESLINT SETTING AND NOT A COMMENT. IT STOPS AN ESLINT WARNING MSG !!!!\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    //}, [])\r\n    thisNode.addEventListener('touchcancel', (event) => {\r\n      console.log(\"touchCancel \")\r\n    });\r\n\r\n    ////// mouse events /////////\r\n    thisNode.addEventListener(\"mousedown\", mouseDown); \r\n    function mouseDown(evt) {\r\n      console.log(\"mousedown\")\r\n      document.addEventListener('mousemove', doMoveMouse);\r\n    }\r\n    document.addEventListener(\"mouseup\", (mouseEvt) =>  { \r\n      document.removeEventListener('mousemove', doMoveMouse);\r\n    }); \r\n        \r\n    /////// touch (phone) events ///////\r\n    // NOTE: * touchMove only applies if pointer started in the component.\r\n    //       * touchMove continues even after pointer has left the component.\r\n    //       * listener stops when pointer has lifted off screen\r\n    thisNode.addEventListener(\"touchmove\", doTouchMove, false);\r\n\r\n    thisNode.addEventListener(\"touchend\", (evt) => {\r\n        // clean up\r\n        console.log('touchend knobID ' + props.knobID);\r\n        //thisNode.removeEventListener('touchmove', doTouchMove);\r\n    }, false);\r\n\r\n    thisNode.addEventListener(\"touchstart\", (evt) => {\r\n        console.log('touchstart knobID ' + props.knobID)\r\n        // on mobile prevents screen from scrolling and messing up knob turn\r\n        evt.preventDefault(); \r\n        // the component already knows its the only one to get events..\r\n    }, false);\r\n  }\r\n\r\n  function doTouchMove(touchEvt) {\r\n    try {\r\n      //console.log('doTouchMove knobID ' + props.knobID + \" \" + evtCt.current++)\r\n      touchEvt.preventDefault(); // on mobile prevents screen from scrolling and messing up knob turn\r\n      // shift frame of reference to the active node instead of screen\r\n      var mouseX = touchEvt.touches[0].clientX - this.offsetLeft;\r\n      // y is lower at top and increases down. If window is scrolled, messes up Y coord, so compensate with scrollY.\r\n      var mouseY = canvasWidthHeight.current - (touchEvt.touches[0].clientY - this.offsetTop) - window.scrollY; \r\n      mouseY = mouseY.toFixed(0)\r\n      var delta = Math.abs(Math.abs(mouseX) - Math.abs(lastX)) +  Math.abs(Math.abs(mouseY) - Math.abs(lastY))\r\n      // reduce load on client by not redrawing to every move\r\n      // if (lastX !== UNINIT_A && delta < MOUSEMOVETHRESHOLD) { \r\n      //   return; \r\n      // }\r\n\r\n      lastX = mouseX;  lastY =  mouseY;\r\n      setmouseX_st(mouseX); setMouseY_st(mouseY); // cause a REDRAW! \r\n    } catch (except) {\r\n      console.log('doTouchMove exception')\r\n    }\r\n  } \r\n  // TODO dimensions change a bit when scrollbar gets hidden and looks bad\r\n  // This prevents screen from squishing around while knob is turned.\r\n  // function freezeScroll(trueOnfalseOff) { \r\n  //   if (trueOnfalseOff)  document.body.style.overflow = \"hidden\"; \r\n  //   else document.body.style.overflow = \"auto\";  }\r\n\r\n  var evtCt = useRef(0)\r\n  \r\n  function doMoveMouse(evt) {\r\n    console.log('doMouseMove knobID ' + props.knobID)\r\n    // shift frame of reference to the active node instead of screen\r\n    var mouseX = evt.clientX - thisReactNode.current.offsetLeft;\r\n    // y is lower at top and increases down. If window is scrolled, messes up Y coord, so compensate with scrollY.\r\n    var mouseY = canvasWidthHeight.current - (evt.clientY - thisReactNode.current.offsetTop) - window.scrollY; \r\n    mouseY = mouseY.toFixed(0)\r\n    var delta = Math.abs(Math.abs(mouseX) - Math.abs(lastX)) +  Math.abs(Math.abs(mouseY) - Math.abs(lastY))\r\n    // reduce load on client by not redrawing to every move\r\n    if (lastX !== UNINIT_A && delta < MOUSEMOVETHRESHOLD) { return; }\r\n    setmouseX_st(mouseX); setMouseY_st(mouseY); // cause a REDRAW! \r\n    lastX = mouseX;  lastY =  mouseY;\r\n    return false;\r\n  }\r\n\r\n  function drawCanvas() {\r\n    canvasA.current.width = canvasA.current.height = canvasWidthHeight.current;\r\n    const drawContextA = canvasA.current.getContext('2d');\r\n    drawContextA.clearRect(0, 0, canvasA.current.width, canvasA.current.height);\r\n    const center = canvasWidthHeight.current / 2; \r\n    const lineWidth = props.lineWidthPct / 100 * canvasWidthHeight.current;\r\n    const radius = center - (lineWidth / 2);\r\n    drawContextA.lineWidth = lineWidth;\r\n    var zzx = (mouseX_st == -1000) ? center : mouseX_st;\r\n    var zzy = (mouseY_st == -1000) ? center + 100 : mouseY_st;\r\n    var dx = zzx - center; \r\n    var dy = zzy - center;\r\n    geomAngle.current = Math.atan(dy/dx);\r\n    if (dx < 0.0) geomAngle.current -= Math.PI;\r\n    // geometry has angle starting at 3:00 going up toward 12 counterclockwise. Change to where TopDeadCenter is 0 and clockwise increases.\r\n    knobAngle.current =  Math.PI/2 - geomAngle.current; // -this.angle; // degsToRadians(-90) - this.angle + Math.PI/2;\r\n    // knobAngle.current = toDegClock(knobAngle.current);\r\n    if (knobAngle.current == 360) knobAngle.current = 0;\r\n    //if (Math.PI -geomAngle < ) knobAngle.current = 0;\r\n    props.knobCallback(knobAngle.current)\r\n    // this.angle = radiansToDeg(this.angle).toFixed(0)\r\n    //drawContextA.lineWidth = 22;\r\n    drawContextA.strokeStyle =  '#ff0000';\r\n    drawContextA.beginPath();\r\n    drawContextA.moveTo(center, center);\r\n    // normalize line length to radius\r\n    var ratio = radius/Math.pow(Math.pow(dx, 2) + Math.pow(dy, 2),  0.5);\r\n    drawContextA.lineTo(center + dx * ratio, center - dy * ratio); // Y is upside down, so subtract!\r\n    drawContextA.stroke();\r\n    // now the melon slice \r\n    drawContextA.strokeStyle = '#00ff00';\r\n    drawContextA.beginPath();\r\n    // arc() geometry has geomAngle.current starting  at 3:00 going up toward 12 counterclockwise.\r\n    var topDeadCenter = -Math.PI/2;\r\n    drawContextA.arc(center, center, radius, topDeadCenter, -geomAngle.current);\r\n    drawContextA.stroke();\r\n    // outer ring\r\n    drawContextA.lineWidth = 4;\r\n    drawContextA.strokeStyle = '#777777';\r\n    drawContextA.beginPath();\r\n    drawContextA.arc(center, center, radius, 0, -Math.PI * 2);\r\n    drawContextA.stroke();\r\n  }\r\n\r\n  function MouseInfo(props) {\r\n     return (<div id='mouseMoveID' \r\n         style={{ position:'relative', display:'none', border: '0 solid green',\r\n                  display: 'grid', gridTemplateColumns: 'repeat(2, auto)'}}  >\r\n\t\t\t   <div>val: </div><div>{props.msg} {11}</div>\r\n         <div>X: </div><div>{mouseX_st}</div>\r\n         <div>Y: </div><div>{mouseY_st}</div>\r\n         <div>angle: </div><div>{'geomAngle.: ' + toDegClock(geomAngle.current) + ' knobAngle: ' + toDegClock(knobAngle.current) }</div>\r\n\t\t\t</div>)\r\n  }\r\n\r\n  function RenderStatusBox(props) {\r\n    var topOffst = (props.widthHeight / 4) + 'px';\r\n    // console.log('DisplayA props.widthHeight ' + props.widthHeight + ' doneOnce: ' + reRenderStateTrigger)\r\n    // 1.5vw is based on viewport width, not main div width. Not good for font scaling if 50% width, for example\r\n    // var calcFontSize = (props.widthHeight * props.widthFontWidthFactor) + 'vw'; // '1.7em'\r\n    var calcFontSize = (props.widthHeight * props.widthFontWidthFactor) + 'px';\r\n    return (\r\n      <div id='DisplayA' ref={displayA} \r\n          className={ props.classNamePropA } \r\n          // style={ props.stylePropA } .. works ok\r\n          // NOTE: to combine style from props with those defined here, use \"spread syntax\" \"...\"\r\n          style={{ ...props.stylePropA, // this converts the variable into it's array\r\n            pointerEvents:'none', // WARNING UNPREDICABLE POINTER EVENTS IF NOT HERE !!!!!!\r\n            userSelect:'none',\r\n            gridRow: 1, gridColumn: 1, marginTop:topOffst, height: 'fit-content', // sits on top of first div\r\n            display:'grid', overflow:'hidden',\r\n            fontSize: calcFontSize,\r\n            gridTemplateColumns: 'repeat(2, auto)'\r\n            \r\n          }}\r\n         >\r\n        <div>msg: </div>\r\n        <div>{props.msg}</div>\r\n      </div>)\r\n  }\r\n\r\n  function renderX() { // ported from class component render()\r\n    // console.log('renderx '  + props.knobID)\r\n    // gridTemplateColumns: 'auto 1fr' .. [first col auto width, second uses remainder]\r\n    // also repeat(2, 1fr) [2 cols each uses 1 unit] .... repeat(2, auto) [2 cols each auto-width]\r\n    // note: this component sizes itself based on its parents width and border-width\r\n    console.log('renderX canvasWidthHeight.current: ' + canvasWidthHeight.current + ' doneOnce ' + reRenderStateTrigger)\r\n    return (\r\n      <div ref={thisReactNode} id={props.knobID} style={{ \r\n          display:'grid', gridTemplateColumns: '1fr', // a one-column grid with one overlaid on other\r\n          border: '2px solid aqua'}}>\r\n        <RenderStatusBox // NOTE: some properties are className and style. See code in control.\r\n            widthFontWidthFactor={props.widthFontWidthFactor}\r\n            classNamePropA={props.classNamePropA} // to show how to pass css class name \r\n            stylePropA={props.stylePropA} \r\n            widthHeight={canvasWidthHeight.current} \r\n            msg={renderCt.current++}/>\r\n        {/* above box sits right over below */}\r\n        <canvas id='knobCanvas' ref={canvasA} style={{ gridRow: 1, gridColumn: 1 }}\r\n          height={canvasWidthHeight.current}\r\n          width={canvasWidthHeight.current}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return renderX(); // returned value for entire function component of react\r\n}\r\n\r\nfunction toDegClock(rads) {\r\n   return ((rads / (2 * Math.PI)) * 360 ).toFixed(0)\r\n}\r\n\r\nfunction knobCallbackA(newVal) {\r\n   // console.log('knobCallbackA: ' + newVal)\r\n}\r\n\r\nfunction TestReactKnobInGrid() {\r\n  var qrcanvas = useRef();\r\n  useEffect(() => { // [] empty: run only once when component mounts like componentDidMount\r\n    doQRcode();\r\n     // nothing to do  \r\n    //  window.addEventListener(\"touchmove\", \r\n    //       // second arg to addEventListener is a function.  Use 'arrow notation'. It says\r\n    //       // to make anonymous function taking 'mevent' as argument. It calls another function.\r\n    //       (mevent) =>  { \r\n    //           console.log('container touchmove');\r\n    //           return false;\r\n    //       }\r\n    //  );\r\n  }, []);\r\n  useEffect(() => {  // missing second argument, run every time\r\n    \r\n  });\r\n\r\n  // the QRCode component works by taking a HTML5 canvas that you put in the document and drawing a QRCode into it\r\n  // It lets you easily get the site on you phone (requires server and phone on same subnet).\r\n  // First set you browser to the true IP address (not localhost) and then scan it.\r\n  function doQRcode() {\r\n    // SAVE THIS:   to get url (not localhost) and open in browser, on dev machine run this:\r\n    // on pc, run \"hostname -I\" to get ip. Below is a script which should extract needed parts of result:\r\n    // foo=http://$(hostname -I | sed \"s/ *$//g\"):3000; google-chrome $foo;\r\n    // on ubuntu:\r\n    // first to \"ipconfig | grep IPv4\" to see which line to choose below\r\n    // ipconfig | grep IPv4 | sed -n '4 p'| sed -n -e 's/.*: //p'\r\n    //                                ^ line 3           ^^^ all stuff before colon\r\n    // -n means not to print anything by default. -e is followed by a sed command. s is the pattern replacement command.\r\n    var myURL = window.location.href;\r\n    console.log(myURL)\r\n    QRCode.toCanvas(qrcanvas.current, myURL, { width: 99 }, function (error) {\r\n      if (error) console.error(error); console.log('success!');})\r\n  }\r\n\r\n  // produces these outputs for pc and nix respectively:\r\n  // foo=$(ipconfig| gawk '/Wi-Fi:/,0 { print $0 } ' | sed -n 's/IPv4.*\\:\\(.*\\)/\\1/p'); echo $foo; \"C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe\" $foo:3001;\r\n  // above uses gawk to get Wi-Fi lines, then pipes to sed which gets the IPv4 ip address\r\n  //       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ obtains Wi-Fi ip address\r\n  //     ^ run what inside () and use output to set foo        ^ substitute     ^^ first capture\r\n  //                        ^^^^^^ find this up to semicolon     ^^^^^^ find line with IPv4\r\n  //                                    ^^^^^^^^ print all lines past matching line \r\n  //                                                                      ^^^^^ capture line past semicolon using ()\r\n  //                                                                            ^^^ output capture here its the ip address\r\n  //             \r\n  // foo=http://$(hostname -I | sed \"s/\\(\\.*\\)\\ .*/\\1/g\"); echo $foo; google-chrome $foo:3001;\r\n  function showPS_pc() { return(<div>foo=$(ipconfig| gawk '/Wi-Fi:/,0 &#123; print $0 &#125; ' | sed -n 's/IPv4.*\\:\\(.*\\)/\\1/p'); echo $foo; \"C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe\" $foo:3001;</div>);}\r\n  function showPS_nix() { return(<div>foo=http://$(hostname -I | sed \"s/\\(\\.*\\)\\ .*/\\1/g\"); echo $foo; google-chrome $foo:3001;</div>);}\r\n  return (\r\n    // below classname defined in css file at top. in css file: @media only screen and (min-width: 1024px) {\r\n    <div className='topLevelDivAdaptiveCSS_A' style={{ border: '2px solid orange', display:'grid',  \r\n         gridTemplateColumns: 'repeat(8, 1fr)'}}  >\r\n      <div style={{fontSize: '1.2em', gridColumn: '1/9', textAlign: 'center', paddingRight: '10%'}} \r\n            onClick={() => { window.location.reload();}}>\r\n              reload { LABEL }\r\n      </div>\r\n        <div style={{gridColumn: '1/9', border:'2px solid #ffff00'}} >\r\n        {/* style={{ width:'101px', height:'101px', aspectRatio: 'auto 111 / 111'}} */}\r\n          qrcanvas \r\n          to get local ip PC (click to copy):<br/>\r\n          <div style={{ background:'#ccccff'}} onClick={(evt) => \r\n              { console.log('to copy: ' + evt.currentTarget.textContent);\r\n                if (!navigator.clipboard) { console.log('copy only ok with https'); return; }\r\n                navigator.clipboard.writeText(evt.currentTarget.textContent)\r\n                document.execCommand(\"copy\");\r\n                window.getSelection().removeAllRanges();\r\n          }}>{showPS_pc()}</div>\r\n          to get local ip UNIX (click to copy):<br/>\r\n          <div style={{ background:'#ccccff'}} onClick={(evt) => \r\n              { console.log('to copy: ' + evt.currentTarget.textContent);\r\n                if (!navigator.clipboard) { console.log('copy only ok with https'); return; }\r\n                navigator.clipboard.writeText(evt.currentTarget.textContent)\r\n                document.execCommand(\"copy\");\r\n                window.getSelection().removeAllRanges();\r\n          }}>{showPS_nix()}</div>\r\n          <div>screen width: { window.innerWidth }</div>\r\n          <canvas ref={qrcanvas}  ></canvas>\r\n        </div>\r\n        <div  id='bigTopOne' style={{ gridColumn: '1/9', border: '1px solid red '}}>\r\n          <div style={{border: '1px solid #777777', width: '75%'}} >\r\n            <ReactKnob knobID='knob1' lineWidthPct={10} knobCallback={knobCallbackA}\r\n            widthFontWidthFactor={0.15}\r\n            classNamePropA='cssClassGreen' // to show how to pass css class name \r\n            // stylePropA is defined in ComponentDev.css imported at top\r\n            stylePropA={{ fontFamily: 'Sans-Serif', fontWeight: 'bold', border: '1px solid blue'  }} \r\n            /></div>\r\n        </div>\r\n        {/* */}\r\n        <div id='AAb' style={{gridColumn: '1/3', border: '1px solid red '}}>\r\n          <ReactKnob knobID='knob2' lineWidthPct={10}  knobCallback={knobCallbackA}\r\n          widthFontWidthFactor={0.25} \r\n          classNamePropA='cssClassGreen' // to show how to pass css class name \r\n          stylePropA={{ fontFamily: 'Sans-Serif', fontWeight: 'bold', border: '1px solid blue'  }} \r\n          /></div>\r\n        <div id='BB' style={{gridColumn: '3/8', border: '1px solid red'}}>\r\n          <ReactKnob knobID='knob3' lineWidthPct={10}  knobCallback={knobCallbackA}\r\n          widthFontWidthFactor={0.15}\r\n          classNamePropA='cssClassGreen' // to show how to pass css class name \r\n          stylePropA={{ fontFamily: 'Sans-Serif', fontWeight: 'bold', border: '1px solid blue'  }} \r\n          /></div> \r\n        <div style={{gridColumn: '1/5', textAlign: 'center', paddingRight: '10%'}} >\r\n          NOTE: ReactKnob is always SQUARE and assumes the WIDTH given to it by the\r\n          parent element, in this case a grid div.\r\n        </div>\r\n        <div style={{gridColumn: '1/7', textAlign: 'center', paddingRight: '10%'}} >\r\n          NOTE: ReactKnob is always SQUARE and assumes the WIDTH given to it by the\r\n          parent element, in this case a grid div.\r\n        </div>\r\n        \r\n      </div>\r\n  )\r\n}\r\n\r\n\r\n\r\n// ---------- END snip to copy into react code -----------------------\r\nexport { ReactKnob, LABEL, TestReactKnobInGrid };\r\n\r\n/**\r\nCODEPEN NOTES:\r\nTHIS IS WRITTEN FOR CODEPEN. CODEPEN DOESNT USE PACKAGE.JSON,\r\nwhich would normally have these entries:\r\n\"react\": \"^17.0.1\",\r\n\"react-dom\": \"^17.0.1\",\r\nINSTEAD DO THIS IN CODEPEN: \r\nmethod 1: SETTINGS->js->ADD EXTERNAL SCRIPTS/PENS\r\n  https://cdnjs.cloudflare.com/ajax/libs/react/15.3.1/react.min.js\r\n  AND https://cdnjs.cloudflare.com/ajax/libs/react/15.3.1/react-dom.min.js\r\nmethod 2: SETTINGS->js->ADD PACKAGES\r\n  search for \"react\" and when you click it it adds the import entry \r\n  at top of this file. Repeat for react-dom.\r\nWhen you port this code to visual studio code, put abovve entries in package.json\r\nand add these imports to code:\r\nimport React from 'react';\r\n?????  import React, { React-dom } from 'react';\r\ncodepen HTML:    <div id='app'></div>\r\ncodepen css: blank\r\nDEBUGGING:\r\nSAVE project, then click on blocky thing upper right->debug\r\n- a new window pops up; use chrome debugger to view console, source, breakpoints etc\r\n- to get to source, put a console.log('abc') somewhere and on console the source file with weird long name is on right. Click on it and you will see your own code.\r\n- Beware if script fails this screen will be blank until you look at the console.\r\n- You can't debug main screen because it has all the codepen stuff.\r\n**/\r\n //var deltaDistSquared = Math.pow(Math.abs(this.state.mouseX_st) - Math.abs(this.state.lastX), 2) + \r\n    //                       Math.pow(Math.abs(this.state.mouseY) - Math.abs(this.state.lastY), 2)\r\n\r\n    ////thisNode.addEventListener(\"touchstart\", touchStart); \r\n\r\n    // mobile user put finger on control. Setup move listener to move the dial.\r\n    // function touchStart(evt) {\r\n    //   evt.preventDefault(); // on mobile prevents screen from scrolling and messing up knob turn\r\n    //   console.log('touchstart ' + props.knobID);\r\n    //   isMouseTracking.current = true;\r\n    //   /////thisNode.addEventListener(\"touchmove\", doTouchMove);\r\n    // }\r\n    \r\n    // mobile user lifted finger anywhere in screen. remove the event listener.\r\n    // document.addEventListener(\"touchend\", (evt) =>   { \r\n    //   if (isMouseTracking.current == true) {\r\n    //     console.log('touchend ' + props.knobID); \r\n    //     //  thisNode.removeEventListener(\"touchmove\", doTouchMove);\r\n    //     isMouseTracking.current = false;\r\n    //   }\r\n    // });\r\n","import React from 'react';\r\nimport * as ReactDOM from 'react-dom'; \r\n// import { TestReactKnobInGrid } from './ReactKnobClass.js';\r\nimport { TestReactKnobInGrid } from './ReactKnobFn.js';\r\nimport {  BrowserRouter as Router, Route, Link } from \"react-router-dom\";\r\n\r\nclass RouterForMultiPages extends React.Component {\r\n  render() {\r\n    return(<Router>\r\n      <main>\r\n      <div>\r\n          {/* set up routes to .js pages */}\r\n          <Route path=\"/TestReactKnobInGrid_url\">\r\n            <TestReactKnobInGrid /> \r\n          </Route>\r\n          <nav>\r\n            <br/><Link to=\"/TestReactKnobInGrid_url\">TestReactKnobInGrid</Link>\r\n          </nav> \r\n          </div>\r\n      </main>\r\n    </Router>);\r\n  }\r\n}\r\n\r\nfunction ShowLoc() {\r\n  return(\r\n  // <div style={{ fontSize:'0.5em', backgroundColor:\"#ffff00\", width:'fit-content' }} \r\n  // onMouseEnter={(event) => {\r\n  //   event.currentTarget.style.fontSize='150%'}} \r\n  // onMouseLeave={(event) => {event.currentTarget.style.fontSize='0.5em'}}\r\n  // >\r\n  <div>\r\n    tues....this div is from containerSetups/frontend/react/componentDev/src/index.js\r\n  </div>\r\n  )\r\n}\r\n\r\n/*\r\nonMouseEnter={(event) => {event.currentTarget.style.fontSize='150%'}} \r\n               onMouseLeave={(event) => {event.currentTarget.style.fontSize='0.5em'}}\r\nonMouseEnter={this.style.fontSize='150%'} onMouseLeave={this.style.fontSize='0.5em'} >\r\n               */\r\n  ReactDOM.render(<div>\r\n  <ShowLoc/>\r\n    <RouterForMultiPages  /></div>\r\n    ,\r\n    document.getElementById('22root_div_which_gets_populated_by_indexjs')\r\n  );\r\n  \r\n"],"sourceRoot":""}